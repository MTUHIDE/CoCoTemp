package space.hideaway.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import space.hideaway.UserValidator;
import space.hideaway.model.User;
import space.hideaway.services.SecurityServiceImplementation;
import space.hideaway.services.UserService;

/**
 * HIDE CoCoTemp 2016
 * Class responsible for routing requests relating to registration and creation of new user-accounts.
 *
 * @author Piper Dougherty
 */
@Controller
public class RegisterController {

    /**
     * The service responsible for obtaining and performing operations on user-accounts.
     */
    @Autowired
    private UserService userService;

    /**
     * The application security service responsible for handling operations
     * relating to authenticating a user.
     */
    @Autowired
    private SecurityServiceImplementation securityService;

    /**
     * The component responsible for validating the current properties
     * on a new user-account.
     */
    @Autowired
    private UserValidator userValidator;

    /**
     * Register a new user-account and insert it into the database if
     * all validations pass. Returns a string referencing the page to be
     * displayed on successful registration.
     *
     * @param userForm      The model attribute inserted by the index() method in the RouteController into the object model.
     * @param bindingResult The object allowing errors generated by the userValidator to be inserted into the object model.
     * @param model         The object model managed by Spring.
     * @return A string representing the page to be directed to on successful registration.
     */
    @RequestMapping(value = "/register", method = RequestMethod.POST)
    public String registration(@ModelAttribute("userForm") User userForm, BindingResult bindingResult, Model model) {

        //Obtain the values entered by the user into the form.
        String username = userForm.getUsername();
        String password = userForm.getPassword();

        //Is the user represented by the form of valid format?
        userValidator.validate(userForm, bindingResult);

        if (bindingResult.hasErrors()) {
            /*
            Errors have been detected, so show the index page once more.
            Since we are using bindingResult, the ability to show errors generated by the
            userValidator and represented by bindingResult are not retained when a redirect is used
            server side. This is why index is returned, rather than redirect:/index. Index represents the
            name of the template to be rendered by the template engine.
             */
            return "index";
        }

        //Save the newly created user to the database!
        userService.save(userForm);

        //A helpful method to automatically login the new user.
        securityService.autoLogin(username, password);

        return "redirect:/dashboard";
    }
}
